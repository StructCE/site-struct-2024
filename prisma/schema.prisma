// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Member {
  id                  String                 @id @default(cuid())
  name                String                 @unique
  directorShips       DirectorShipMember[] 
  projects            ProjectMember[]
}

model DirectorShip {
  id      String   @id @default(cuid())
  name    String   @unique
  members DirectorShipMember[]
}

model DirectorShipMember {
  id                  String            @id @default(cuid())
  memberId            String
  directorShipId      String
  directorShipRoleId  String
  directorShipRole    DirectorShipRole  @relation(fields: [directorShipRoleId], references: [id])
  directorShip        DirectorShip      @relation(fields: [directorShipId], references: [id])
  member              Member            @relation(fields: [memberId], references: [id])
}

model DirectorShipRole {
  id                  String @id @default(cuid())
  name                String
  directorShipMembers DirectorShipMember[]
}

model Project {
  id             String          @id @default(cuid())
  name           String          @unique
  description    String          @db.Text
  link           String          @db.Text
  show           Boolean         @default(true)
  projectMembers ProjectMember[]
}

model ProjectMember {
  id            String      @id @default(cuid())
  memberId      String
  projectId     String
  projectRoleId String
  role          ProjectRole @relation(fields: [projectRoleId], references: [id])
  member        Member      @relation(fields: [memberId], references: [id])
  project       Project     @relation(fields: [projectId], references: [id])
}

model ProjectRole {
  id            String          @id @default(cuid())
  name          String          @default("Desenvolvedor")   @unique
  members       ProjectMember[]
}


model Partner {
  id   String @id @default(cuid())
  name String @unique
  link String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
